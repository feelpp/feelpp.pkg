diff --git a/cmake/modules/feelpp.dependencies.cmake b/cmake/modules/feelpp.dependencies.cmake
index 62887384c..95b50e699 100644
--- a/cmake/modules/feelpp.dependencies.cmake
+++ b/cmake/modules/feelpp.dependencies.cmake
@@ -480,11 +480,12 @@ endif (XDMF_FOUND)
 
 # Python libs
 option( FEELPP_ENABLE_PYTHON "Enable Python Support" ${FEELPP_ENABLE_PACKAGE_DEFAULT_OPTION} )
+option( FEELPP_PYTHON_VERSION "Requires Specific Python Version (default 3)" 3 )
 if(FEELPP_ENABLE_PYTHON)
   #
   # Python interp
   #
-  FIND_PACKAGE(PythonInterp 3  REQUIRED)
+  FIND_PACKAGE(PythonInterp ${FEELPP_PYTHON_VERSION}  REQUIRED)
   if(PYTHONINTERP_FOUND)
     execute_process(COMMAND
       ${PYTHON_EXECUTABLE}
@@ -496,7 +497,7 @@ if(FEELPP_ENABLE_PYTHON)
     SET(FEELPP_ENABLED_OPTIONS "${FEELPP_ENABLED_OPTIONS} PythonInterp/${PYTHON_VERSION}" )
   endif()
 
-  FIND_PACKAGE(PythonLibs 3 REQUIRED)
+  FIND_PACKAGE(PythonLibs ${FEELPP_PYTHON_VERSION} REQUIRED)
   if ( PYTHONLIBS_FOUND )
     message(STATUS "[feelpp] PythonLibs: ${PYTHON_INCLUDE_DIRS} ${PYTHON_LIBRARIES}")
     INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS})
@@ -1312,7 +1315,14 @@ LINK_DIRECTORIES(
 #
 # if Feel++ has been installed on the system
 #
+MESSAGE(STATUS "check if feelpp is already installed")
+MESSAGE(STATUS "${CMAKE_SOURCE_DIR}/feel")
+MESSAGE(STATUS "${CMAKE_SOURCE_DIR}/contrib")
+
+MESSAGE(STATUS "NOT EXISTS ${CMAKE_SOURCE_DIR}/feel OR NOT EXISTS ${CMAKE_SOURCE_DIR}/contrib")
 if ( NOT EXISTS ${CMAKE_SOURCE_DIR}/feel OR NOT EXISTS ${CMAKE_SOURCE_DIR}/contrib )
+  MESSAGE(STATUS "not alreay installed")
+
   include(feelpp.macros)
   FIND_PATH(FEELPP_INCLUDE_DIR feel/feelconfig.h  PATHS $ENV{FEELPP_DIR}/include/ PATH_SUFFIXES feel NO_DEFAULT_PATH )
   FIND_PATH(FEELPP_INCLUDE_DIR feel/feelconfig.h  PATHS /usr/include /opt/local/include PATH_SUFFIXES feel )
@@ -1354,6 +1364,8 @@ if ( NOT EXISTS ${CMAKE_SOURCE_DIR}/feel OR NOT EXISTS ${CMAKE_SOURCE_DIR}/contr
     )
   SET(FEELPP_LIBRARIES ${FEELPP_LIBRARY} ${FEELPP_GINAC_LIBRARY} ${FEELPP_NLOPT_LIBRARY} ${FEELPP_IPOPT_LIBRARY} ${FEELPP_LIBRARIES})
 else()
+  MESSAGE(STATUS "alreay installed")
+
   set(FEELPP_LIBRARY feelpp)
   SET(FEELPP_INCLUDE_DIR ${FEELPP_BUILD_DIR}/ ${FEELPP_SOURCE_DIR}/)
   INCLUDE_DIRECTORIES(${FEELPP_INCLUDE_DIR})
@@ -1366,7 +1378,7 @@ endif()
 # Cleaning variables.
 set( varstoclean
      FEELPP_LIBRARIES )
-
+   
 # Do remove duplicated variable entries.
 foreach( varname ${varstoclean})
     if( NOT "${${varname}}" STREQUAL "")
@@ -1375,6 +1387,7 @@ foreach( varname ${varstoclean})
 endforeach()
 
 MARK_AS_ADVANCED(FEELPP_LIBRARIES)
+MESSAGE(STATUS "FEELPP_LIBRARIES=${FEELPP_LIBRARIES}")
 
 # write file which contains libraries
 set( FEELPP_LIBRARIES_WITH_SPACE )
@@ -1401,6 +1414,7 @@ file( GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/feelpp.include.c
 file( GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/feelpp.compile.definition.config.cmake
   CONTENT "set(FEELPP_COMPILE_DEFINITIONS \"$<TARGET_PROPERTY:feelpp,COMPILE_DEFINITIONS>\")" )
 
+MESSAGE(STATUS "Looking for boost")
 set(FEELPP_BOOST_TEXT "
 set (Boost_MAJOR_VERSION \"${Boost_MAJOR_VERSION}\")
 set (Boost_MINOR_VERSION \"${Boost_MINOR_VERSION}\")
@@ -1417,3 +1431,4 @@ foreach( _c date_time filesystem system program_options unit_test_framework sign
 endforeach()
 
 FILE(GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/feelpp.boost.config.cmake CONTENT ${FEELPP_BOOST_TEXT})
+MESSAGE(STATUS "Looking for boost (done)")
